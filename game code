import pygame
import random
import os
from os import path
import sys

img_dir = path.join(path.dirname(__file__), 'img')
snd_dir = path.join(path.dirname(__file__), 'snd')

WIDTH = 600
HEIGHT = 400
FPS = 60

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)

player_shield = 100

pygame.init()
pygame.mixer.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Rhythm")

clock = pygame.time.Clock()
spawns = (HEIGHT * .375, HEIGHT / 2, HEIGHT * .625, HEIGHT * .75)

"""bkgr_image = pygame.image.load(os.path.join(img_dir, "background.jpg")).convert()
background = pygame.transform.scale(bkgr_image, (WIDTH, HEIGHT))
background_rect = background.get_rect()"""

font_name = pygame.font.match_font('arial')
def draw_text(surf, text, size, x, y):
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, BLACK)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)

def newmob():
    m = Mob()
    all_sprites.add(m)
    mobs.add(m)

def draw_shield_bar(surf, x, y, pct):
    if pct < 0:
        pct = 0
    BAR_LENGTH = 100
    BAR_HEIGHT = 10
    fill = (pct / 100) * BAR_LENGTH
    outline_rect = pygame.Rect(x, y, BAR_LENGTH, BAR_HEIGHT)
    fill_rect = pygame.Rect(x, y, fill, BAR_HEIGHT)
    pygame.draw.rect(surf, GREEN, fill_rect)
    pygame.draw.rect(surf, WHITE, outline_rect, 2)

def show_start_screen():
    screen.fill(WHITE)
    draw_text(screen, "Rhythm", 64, WIDTH / 2, HEIGHT / 4)
    draw_text(screen, "Press the matching arrow keys don't let them pass the line", 22, WIDTH / 2, HEIGHT / 2)
    draw_text(screen, "Press a key to start...", 18, WIDTH / 2, HEIGHT * 3 / 4)
    pygame.display.flip()

    waiting = True
    while waiting:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                draw_text(screen, "Key pressed to start game!", 18, WIDTH / 2, HEIGHT * 3 / 4)
                waiting = False
                
def show_Game_Over_screen():
    screen.fill(WHITE)
    draw_text(screen, "Game Over", 64, WIDTH / 2, HEIGHT / 4)
    draw_text(screen, "Press a key to restart...", 18, WIDTH / 2, HEIGHT * 3 / 4)
    pygame.display.flip()

    waiting = True
    while waiting:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False


class Notehits1(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 5, HEIGHT / 4)
        self.shoot_delay = 50
        self.last_shot = pygame.time.get_ticks()
        self.power = 1

    def update(self):
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_UP]:
            self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            if self.power == 1:
                bullet = Bullet(self.rect.centerx, self.rect.centery)
                all_sprites.add(bullet)
                bullets.add(bullet)

class Notehits2(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 5, HEIGHT * .375)
        self.speedx = 0
        self.shoot_delay = 50
        self.last_shot = pygame.time.get_ticks()
        self.power = 1

    def update(self):
        self.speedx = 0
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_RIGHT]:
            self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            if self.power == 1:
                bullet = Bullet(self.rect.centerx, self.rect.centery)
                all_sprites.add(bullet)
                bullets.add(bullet)

class Notehits3(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 5, HEIGHT / 2)
        self.speedx = 0
        self.shoot_delay = 50
        self.last_shot = pygame.time.get_ticks()
        self.power = 1

    def update(self):
        self.speedx = 0
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_DOWN]:
            self.shoot()

    def shoot(self):
         bullet = Bullet(self.rect.centerx, self.rect.centery)
         all_sprites.add(bullet)
         bullets.add(bullet)

class Notehits4(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 5, HEIGHT * .75)
        self.speedx = 0
        self.shoot_delay = 50
        self.last_shot = pygame.time.get_ticks()
        self.power = 1

    def update(self):
        self.speedx = 0
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_LEFT]:
            self.shoot()

    def shoot(self):
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            if self.power == 1:
                bullet = Bullet(self.rect.centerx, self.rect.centery)
                all_sprites.add(bullet)
                bullets.add(bullet)

class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.Surface((30, 30))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speedy = 0

    def update(self):
        self.rect.y += self.speedy
        # kill if it moves off the top of the screen
        if self.rect.bottom < 0:
            self.kill()



class Mob(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        #self.image = random.choice(notes_images)
        #self.image.set_colorkey(BLACK)
        #self.image = self.image_copy()
        #self.image = pygame.transform.scale(self.image, (100, 100))
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLACK)
        self.rect = self.image.get_rect()
        self.rect.y = random.choice(spawns)
        self.rect.x = WIDTH
        self.speedx = random.randrange(-8, -1)

    def update(self):
        self.rect.x += self.speedx
        """if self.rect.y == 100:
            self.image = ('note_1.png')
        elif self.rect.y == 150:
            self.image = ('note_2.png')
        elif self.rect.y == 250:
            self.image = ('note_3.png')
        elif self.rect.y == 300:
            self.image = ('note_4.png')"""
        if self.rect.left < 0:
            self.rect.x = WIDTH
            self.rect.y = random.choice(spawns)
            self.speedx = random.randrange(-8, -1)
            #self.image = random.choice(notes_images)

notes_images = []
notes_list = ['note_1.png','note_2.png','note_3.png','note_4.png']

for img in notes_list:
    notes_images.append(pygame.image.load(os.path.join(img_dir, img)).convert())

all_sprites = pygame.sprite.Group()
mobs = pygame.sprite.Group()
bullets = pygame.sprite.Group()
notehits1 = Notehits1()
notehits2 = Notehits2()
notehits3 = Notehits3()
notehits4 = Notehits4()
all_sprites.add(notehits1)
all_sprites.add(notehits2)
all_sprites.add(notehits3)
all_sprites.add(notehits4)
for i in range(8):
    newmob()
    
score = 0

start = True
running = True
while running:

    if start:
        show_start_screen()
        start = False


    clock.tick(FPS)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    if player_shield <= 0:
        show_Game_Over_screen()
        start = False

    hits = pygame.sprite.groupcollide(mobs, bullets, True, True)
    for hit in hits:
        score += 100
        newmob()
        
    all_sprites.update()
    screen.fill(WHITE)
    #screen.blit(background, background_rect)
    all_sprites.draw(screen)
    #draw_text(screen, str(score), 18, WIDTH / 2, 10)
    #draw_shield_bar(screen, 5, 5, player.shield)
    pygame.display.flip()

pygame.quit()
